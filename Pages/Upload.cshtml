@page
@model UploadModel
@{
    ViewData["Title"] = "Upload";
}

<h2 class="mb-3">Upload Media</h2>

<form id="uploadForm">
    <div class="mb-3">
        <input type="file" id="fileInput" multiple class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Upload</button>
</form>

<!-- Progress Bar -->
<div id="uploadProgressContainer" class="progress mt-3" style="height: 25px; display: none;">
    <div id="uploadProgressBar"
         class="progress-bar progress-bar-striped progress-bar-animated"
         role="progressbar"
         style="width: 0%;">
        0%
    </div>
</div>

<!-- Upload Status Message -->
<div id="uploadStatus" class="mt-3"></div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const uploadForm = document.getElementById('uploadForm');
            const fileInput = document.getElementById('fileInput');
            const progressContainer = document.getElementById('uploadProgressContainer');
            const progressBar = document.getElementById('uploadProgressBar');
            const statusDiv = document.getElementById('uploadStatus');

            uploadForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const files = fileInput.files;
                if (!files.length) {
                    alert("Please select at least one file.");
                    return;
                }

                // Reset UI
                progressContainer.style.display = 'block';
                progressBar.classList.remove('bg-danger', 'bg-success');
                progressBar.style.width = '0%';
                progressBar.textContent = '0%';
                statusDiv.innerHTML = '';

                for (let i = 0; i < files.length; i++) {
                    const file = files[i];

                    try {
                        // Step 1: Get SAS upload URL
                        const sasResponse = await fetch(`/api/generate-sas?filename=${encodeURIComponent(file.name)}`);
                        const sasData = await sasResponse.json();
                        if (!sasData.success) {
                            throw new Error(sasData.message || 'Failed to get SAS URL.');
                        }

                        const sasUrl = sasData.url;

                        // Step 2: Upload with fetch and track progress
                        await uploadFileWithProgress(file, sasUrl, progressBar);

                        if (i === files.length - 1) {
                            progressBar.classList.add('bg-success');
                            statusDiv.innerHTML = `<div class="alert alert-success mt-2">All files uploaded successfully!</div>`;
                        }

                    } catch (err) {
                        progressBar.classList.add('bg-danger');
                        statusDiv.innerHTML = `<div class="alert alert-danger mt-2">${err.message}</div>`;
                        break;
                    }
                }
            });

            async function uploadFileWithProgress(file, sasUrl, progressBar) {
                return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open('PUT', sasUrl);

                    xhr.upload.onprogress = function (e) {
                        if (e.lengthComputable) {
                            const percent = Math.round((e.loaded / e.total) * 100);
                            progressBar.style.width = percent + '%';
                            progressBar.textContent = percent + '%';
                        }
                    };

                    xhr.onload = () => {
                        if (xhr.status === 201 || xhr.status === 200) {
                            resolve();
                        } else {
                            reject(new Error(`Upload failed: ${xhr.status}`));
                        }
                    };

                    xhr.onerror = () => {
                        reject(new Error('Upload error occurred.'));
                    };

                    xhr.setRequestHeader('x-ms-blob-type', 'BlockBlob');
                    xhr.send(file);
                });
            }
        });
    </script>
}
